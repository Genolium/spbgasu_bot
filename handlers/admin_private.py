#           –û–ë–†–ê–ë–û–¢–ö–ê –ê–î–ú–ò–ù–°–ö–ò–• –ö–û–ú–ê–ù–î
from aiogram import types,Router,F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, CommandObject
from aiogram.enums import ParseMode
from datetime import date
from werkzeug.security import generate_password_hash
from filters.is_admin import IsAdminIDFilter
from keyboardrs.admin_keyboards import *
from keyboardrs.quiz_create_keyboard import quiz_keyboard
from keyboardrs.advanced_admin import advanced_keyboard
from utility.util import *
from utility.db import *
from utility.states import *

admin_private_router=Router()
admin_private_router.message.filter(IsAdminIDFilter())

# –ü–†–ò–í–ï–¢–°–¢–í–ò–ï
@admin_private_router.message(CommandStart())
async def start_cmd(message: types.Message, command: CommandObject, state:FSMContext):
    await state.clear()
    args = command.args
    if args and int(args):
        a = int(args)
        button_url = f'tg://user?id={a}'
        markup = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞", url=button_url)]])
        await bot.send_message(message.chat.id, text=f'üîóüëá–°—Å—ã–ª–∫–∞ –Ω–∞ id {a}:\n\n<a href="tg://user?id={a}">—Å—Å—ã–ª–∫–∞</a>', reply_markup=markup, parse_mode=ParseMode.HTML)
    elif not get_user(message.from_user.id):
       add_user(message.from_user.id)
    await message.answer(F'–î–æ–±—Ä—ã–π –¥–µ–Ω—å,<b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.username}</b>üëã',reply_markup=admin_keyboard, parse_mode=ParseMode.HTML)

# –í–´–í–û–î –°–ü–ò–°–ö–ê –ê–î–ú–ò–ù–û–í
@admin_private_router.message(F.text == "üìã–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
async def admin_list(message: types.Message, state:FSMContext):
    await state.clear()
    l = ""
    for admin in get_all_admins():
        id = str(admin[0])
        user = admin[1]
        l += f"{user}: id={id}\n"
    await message.answer(l)

# –î–û–ë–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê 
@admin_private_router.message(F.text == "üìù–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def add_admin_message(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ *–∏–º—è* –Ω–æ–≤–æ–≥–æ *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\.",reply_markup=types.reply_keyboard_remove.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Add_Admin_States.waiting_for_username)

@admin_private_router.message(Add_Admin_States.waiting_for_username)
async def add_admin_username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.reply("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ *id* –¥–ª—è –Ω–æ–≤–æ–≥–æ *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\(–µ–≥–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /id –≤ –±–æ—Ç–µ\)\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Add_Admin_States.waiting_for_id)

@admin_private_router.message(Add_Admin_States.waiting_for_id)
async def add_admin_id(message: types.Message, state: FSMContext):
    await state.update_data(id=message.text)
    await message.reply("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ *–ª–æ–≥–∏–Ω* –¥–ª—è –Ω–æ–≤–æ–≥–æ *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Add_Admin_States.waiting_for_login)
    
@admin_private_router.message(Add_Admin_States.waiting_for_login)
async def add_admin_username(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.reply("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\.", parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Add_Admin_States.waiting_for_password)

@admin_private_router.message(Add_Admin_States.waiting_for_password)
async def add_admin_username(message: types.Message, state: FSMContext):
    try:
        await state.update_data(password=message.text)
        new_admin_data = await state.get_data()
        add_admin(int(new_admin_data["id"]), str(new_admin_data["username"]), str(new_admin_data["login"]), str(generate_password_hash(new_admin_data["password"])))    
        await message.reply("‚úÖ–ù–æ–≤—ã–π *–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω*\.",reply_markup=admin_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        await state.clear()
    except:
        await message.reply("‚ùå*–ù–µ —É–¥–∞–ª–æ—Å—å* –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\.",reply_markup=admin_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        await state.clear()

# –£–î–ê–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ê –ü–û ID
@admin_private_router.message(F.text == "üóëÔ∏è–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ id")
async def delete_admin_message(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ *Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å\.", reply_markup=types.reply_keyboard_remove.ReplyKeyboardRemove(),parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Delete_Admin_States.waiting_for_id)

@admin_private_router.message(Delete_Admin_States.waiting_for_id)
async def delete_admin_id(message: types.Message, state: FSMContext):
    try:
        tg_id = message.text
        delete_admin(int(tg_id))
        await message.reply("‚úÖ–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä *—É—Å–ø–µ—à–Ω–æ* —É–¥–∞–ª–µ–Ω\.", reply_markup=advanced_keyboard,parse_mode=ParseMode.MARKDOWN_V2)
        await state.clear()
    except:
        await message.reply("‚ùå*–ù–µ —É–¥–∞–ª–æ—Å—å* —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\.", reply_markup=advanced_keyboard,parse_mode=ParseMode.MARKDOWN_V2)
        await state.clear()

# –†–ê–°–°–´–õ–ö–ò
@admin_private_router.message(F.text == "üì®–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def send_newsletter(message: types.Message, state: FSMContext):
    await state.clear()
    kb = [
        [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer('''–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç *—Ä–∞—Å—Å—ã–ª–∫–∏* üì©, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω *–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º* –±–æ—Ç–∞ ü§ñ\n
–í—ã –º–æ–∂–µ—Ç–µ *–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏–∑ Telegram* \(–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫—É—Ä—Å–∏–≤, —Å–ø–æ–π–ª–µ—Ä –∏ —Ç\.–¥\.\)''',reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(NewsletterStates.waiting_for_content)

@admin_private_router.message(NewsletterStates.waiting_for_content)
async def get_newsletter_content(message: types.Message, state: FSMContext):
    await state.update_data(content=message)

    if message.text and message.text.lower()=="–æ—Ç–º–µ–Ω–∞":
        await message.answer("‚úÖ–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ *–æ—Ç–º–µ–Ω–µ–Ω–æ*\.", parse_mode=ParseMode.MARKDOWN_V2,reply_markup=admin_keyboard)
        await state.clear()
    else:     
        keyboard = types.InlineKeyboardMarkup(row_width=2,inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="send_newsletter"),
                types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data="cancel_newsletter")
            ]
        ])
        await message.answer(f"‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—èüëá", reply_markup=keyboard)
        await state.set_state(NewsletterStates.confirm_newsletter)

@admin_private_router.callback_query(F.data == "send_newsletter")
async def confirm_newsletter(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    message = user_data["content"]
    add_newsletter(message.text, message.from_user.id)
    for user in get_all_users():
        if user[0] not in (f[1] for f in getAllBannedUsers()):
            try:
                await message.copy_to(chat_id=user[0])
            except:
                print(f"‚ùå–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id {user[0]}")
    await call.message.answer(f"‚úÖ*–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ*\.",reply_markup=admin_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
    await call.message.edit_reply_markup()
    await state.clear()

@admin_private_router.callback_query(F.data == "cancel_newsletter")
async def cancel_newsletter(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("‚ùå*–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞*\.", parse_mode=ParseMode.MARKDOWN_V2,reply_markup=admin_keyboard)
    await call.message.edit_reply_markup()
    await state.clear()

# FAQ
@admin_private_router.message(F.text == "üìå‚ùì–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ FAQüìù")
async def start_add_faq(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ *—Ä–∞–∑–¥–µ–ª* –≤–æ–ø—Ä–æ—Å–∞:",reply_markup=types.reply_keyboard_remove.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(FAQ_States.waiting_for_question_group)

@admin_private_router.message(FAQ_States.waiting_for_question_group)
async def get_question_group(message: types.Message, state: FSMContext):
    question_group = message.text
    await state.update_data(question_group=question_group)
    await message.answer("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ *–≤–æ–ø—Ä–æ—Å*:", parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(FAQ_States.waiting_for_question)

@admin_private_router.message(FAQ_States.waiting_for_question)
async def get_question(message: types.Message, state: FSMContext):
    question = message.text
    await state.update_data(question=question)
    await message.answer("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ *–æ—Ç–≤–µ—Ç*:", parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(FAQ_States.waiting_for_answer)

@admin_private_router.message(FAQ_States.waiting_for_answer)
async def get_answer(message: types.Message, state: FSMContext):
    answer = message.text
    user_data = await state.get_data()
    add_faq(user_data["question_group"], user_data["question"], answer)
    await message.answer("‚úÖ*FAQ* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\!", reply_markup=advanced_keyboard,parse_mode=ParseMode.MARKDOWN_V2)
    await state.clear()

#–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@admin_private_router.message(F.text == "üìÖüñãÔ∏è–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
async def start_add_event(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ* –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\:", reply_markup=types.reply_keyboard_remove.ReplyKeyboardRemove(),parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Event_States.waiting_for_name)

@admin_private_router.message(Event_States.waiting_for_name)
async def get_event_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer("üì∑–ü—Ä–∏—à–ª–∏—Ç–µ *—Ñ–æ—Ç–æ* –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\:", parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Event_States.waiting_for_photo)

@admin_private_router.message(Event_States.waiting_for_photo, F.content_type == types.ContentType.PHOTO)
async def get_event_name(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    await state.update_data(photo=photo)
    await state.update_data(file_id=file_id)
    await message.answer("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ *–¥–∞—Ç—É* –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\:", parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Event_States.waiting_for_datetime)

@admin_private_router.message(Event_States.waiting_for_datetime)
async def get_event_date(message: types.Message, state: FSMContext):
    try:
        date_str = message.text
        await state.update_data(date=date_str)
        await message.answer("‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ *–æ–ø–∏—Å–∞–Ω–∏–µ* –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\:",parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(Event_States.waiting_for_description)
    except ValueError:
        await message.answer("‚ùå*–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç*", parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(Event_States.waiting_for_datetime)

@admin_private_router.message(Event_States.waiting_for_description)
async def get_event_date(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    user_data = await state.get_data()
    add_event(user_data["name"],user_data["date"],user_data["description"], user_data["file_id"])
    await message.answer(f"‚úÖ–û–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",reply_markup=advanced_keyboard)
    await state.clear()

# –°–û–ó–î–ê–ù–ò–ï –û–ü–†–û–°–ù–ò–ö–ê
@admin_private_router.message(F.text == "üó≥Ô∏è–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")
async def create_quiz(message: types.Message,state: FSMContext):
    await state.clear()
    kb = [
        [types.KeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("‚úçÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ *–≤–æ–ø—Ä–æ—Å*\.\n\n–ß—Ç–æ–±—ã *–æ—Ç–º–µ–Ω–∏—Ç—å* —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞, –Ω–∞–∂–º–∏—Ç–µ *‚ùå–û—Ç–º–µ–Ω–∞*\.",
                         reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Quiz_Creation_States.waiting_for_question)

@admin_private_router.message(Quiz_Creation_States.waiting_for_question)
async def quiz_creation_question(message: types.Message, state: FSMContext):
    if message.text.lower()=="‚ùå–æ—Ç–º–µ–Ω–∞":
        await message.answer("‚úÖ–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ *–æ—Ç–º–µ–Ω–µ–Ω–æ*\.", parse_mode=ParseMode.MARKDOWN_V2,reply_markup=admin_keyboard)
        await state.clear()
    else:
        await message.answer("‚úÖ–í–æ–ø—Ä–æ—Å *–¥–æ–±–∞–≤–ª–µ–Ω*\.", parse_mode=ParseMode.MARKDOWN_V2)
        await message.answer("üëâ*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ* –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ‚å®Ô∏è\.",reply_markup=quiz_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(Quiz_Creation_States.waiting_for_actions)
        st = await state.get_data()
        try:
            await state.update_data(txt=(st["txt"]+f"_q{message.text}_q"))    
        except:
            await state.update_data(txt=(f"{message.text}_q"))
        

@admin_private_router.message(Quiz_Creation_States.waiting_for_actions)
async def quiz_actions(message: types.Message,state:FSMContext):
    if(message.text == "üìù–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç"):
        await message.answer("‚úçÔ∏è*–ù–∞–ø–∏—à–∏—Ç–µ* —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞\.",reply_markup=types.reply_keyboard_remove.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(Quiz_Creation_States.waiting_for_answer)
    elif(message.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞üîö"):
        send_buttons = [
            [types.KeyboardButton(text="üì¢–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ø—Ä–æ—Å–∞")],
            [types.KeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞")]
        ]

        send_keyboard = types.ReplyKeyboardMarkup(keyboard=send_buttons, resize_keyboard=True)
        await message.answer("‚úÖ–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ *—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ‚å®Ô∏è\.",reply_markup=send_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(Quiz_Creation_States.waiting_for_send)
    elif(message.text=="üìù–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"):
        await message.answer("‚úçÔ∏è–ù–∞–ø–∏—à–∏—Ç–µ *–≤–æ–ø—Ä–æ—Å*\.",
            reply_markup=types.reply_keyboard_remove.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(Quiz_Creation_States.waiting_for_question)

@admin_private_router.message(Quiz_Creation_States.waiting_for_answer)
async def quiz_creation_answer(message: types.Message, state:FSMContext):
    if ';' in message.text:
        await message.answer("‚ùå–û—Ç–º–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª ;")
    else:
        await message.answer("‚úÖ–û—Ç–≤–µ—Ç *—É—Å–ø–µ—à–Ω–æ* –¥–æ–±–∞–≤–ª–µ–Ω\.",reply_markup=quiz_keyboard, parse_mode=ParseMode.MARKDOWN_V2 )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ *–¥–µ–π—Å—Ç–≤–∏–µ* –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ‚å®Ô∏è", parse_mode=ParseMode.MARKDOWN_V2)
        st = await state.get_data()
        await state.update_data(txt=st["txt"]+f"{message.text};")
        await state.set_state(Quiz_Creation_States.waiting_for_actions)

@admin_private_router.message(Quiz_Creation_States.waiting_for_send)
async def send_quiz(message: types.Message, state: FSMContext):
    if(message.text=="‚ùå–û—Ç–º–µ–Ω–∞"):
        await message.answer("‚úÖ–†–∞—Å—Å—ã–ª–∫–∞ –æ–ø—Ä–æ—Å–∞ *—É—Å–ø–µ—à–Ω–æ* –æ—Ç–º–µ–Ω–µ–Ω–∞\.",reply_markup=admin_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
    elif message.text=="üì¢–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ–ø—Ä–æ—Å–∞":
            data = await state.get_data()
            data_array = data["txt"].split("_q")
            quiz_id = get_last_quiz()[0]+1
            quiz_questions=[]
            quiz_answers = []
            for i in range(0,len(data["txt"].split("_q"))):
                if i % 2 !=0:
                    #data_array[i-1] —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                    #data_array[i] –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
                    quiz_questions.append(data_array[i-1])
                    quiz_answers.append(data_array[i])
                    add_quiz(quiz_id,data_array[i-1],data_array[i])
           
            answer_buttons = []
            for ans in data_array[1].split(';'):
                if len(str(ans))>0:
                    if(len(data_array)==2):#–ï—Å–ª–∏ –≤ –æ–ø—Ä–æ—Å–µ –≤—Å–µ–≥–æ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
                        answer_buttons.append(types.InlineKeyboardButton(text=str(ans),callback_data=f"quiz_{quiz_id}_{str(ans)}"))
                    else:
                        answer_buttons.append(types.InlineKeyboardButton(text=str(ans),callback_data=f"quiz_{quiz_id}_{str(ans)}_0_{len(quiz_questions)}"))
            answer_keyboard = types.InlineKeyboardMarkup(inline_keyboard=chunk_list(answer_buttons,1))
            for user in get_all_users():
                if user[0] not in (f[1] for f in getAllBannedUsers()):
                    try: 
                        await bot.send_message(chat_id=user[0],text="üì¢üö®_–í–∞–º –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å –æ—Ç –°—Ç—É–¥—Å–æ–≤–µ—Ç–∞_\.üì™", parse_mode=ParseMode.MARKDOWN_V2)
                        await bot.send_message(chat_id=user[0],text=f"{quiz_questions[0]}",reply_markup=answer_keyboard)              
                    except:
                        message.answer(f"‚ùå*–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å* —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id {user[0]}\.", parse_mode=ParseMode.MARKDOWN_V2)
            await message.answer("‚úÖ–û–ø—Ä–æ—Å *—É—Å–ø–µ—à–Ω–æ* —Ä–∞–∑–æ—Å–ª–∞–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\.",reply_markup=admin_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
            await state.clear()

# –†–ê–°–®–ò–†–ï–ù–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
@admin_private_router.message(F.text == "‚öôÔ∏è–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
async def advanced_options(message: types.Message, state:FSMContext):
    await state.clear()
    await message.answer("üëâ–í—ã *–ø–µ—Ä–µ—à–ª–∏* –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\.",reply_markup=advanced_keyboard, parse_mode=ParseMode.MARKDOWN_V2)
# –í–´–•–û–î –ò–ó –†–ê–°–®–ò–†–ï–ù–ù–´–• –ù–ê–°–¢–†–û–ï–ö    
@admin_private_router.message(F.text == "‚è™")
async def advanced_options(message: types.Message, state:FSMContext):
    await state.clear()
    await message.answer("üëâ–í—ã *–≤—ã—à–ª–∏* –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\.",reply_markup=admin_keyboard, parse_mode=ParseMode.MARKDOWN_V2)

# –†–ï–ñ–ò–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
@admin_private_router.message(F.text == "ü´•–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def advanced_options(message: types.Message, state:FSMContext):
    await state.clear()
    await message.answer("üëâ–í—ã *–ø–µ—Ä–µ—à–ª–∏* –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\.",reply_markup=fake_user_keyboard, parse_mode=ParseMode.MARKDOWN_V2)

# –í–´–•–û–î –ò–ó –†–ï–ñ–ò–ú–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø    
@admin_private_router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è‚è™")
async def advanced_options(message: types.Message, state:FSMContext):
    await state.clear()
    await message.answer("üëâ–í—ã *–≤—ã—à–ª–∏* –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º\!",reply_markup=admin_keyboard, parse_mode=ParseMode.MARKDOWN_V2)

#–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
@admin_private_router.message(F.text == "üñãÔ∏èüé•–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏")
async def change_photo_1(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üì∑–í–≤–µ–¥–∏—Ç–µ id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫—É\:",
                         reply_markup=types.ReplyKeyboardMarkup(keyboard=[cancel_button], resize_keyboard=True),parse_mode=ParseMode.MARKDOWN_V2)
    await state.set_state(Change_Photo_States.waiting_for_num)

@admin_private_router.message(Change_Photo_States.waiting_for_num)
async def change_photo_2(message: types.Message, state: FSMContext):
    await state.clear()
    if message.text == "‚è™ –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=advanced_keyboard)
        await state.clear()
        return
    event = get_event(message.text)
    if event:
        event = event[0]
        await state.update_data(id=message.text)
        await message.answer(f"–í—ã —Ä–µ—à–∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –æ–±–ª–æ–∂–∫—É –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: \n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event[1]}\n<b>–î–∞—Ç–∞:</b> {event[2]}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event[3]}",
                             parse_mode=ParseMode.HTML)
        await message.answer("üì∑–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ *—Ñ–æ—Ç–æ* –¥–ª—è –æ–±–ª–æ–∂–∫–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è\. \n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –æ–±–ª–æ–∂–∫—É –º–µ–ø–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É",
            reply_markup=types.ReplyKeyboardMarkup(keyboard=[cancel_button, remove_photo_button], resize_keyboard=True), parse_mode=ParseMode.MARKDOWN_V2)
        await state.set_state(Change_Photo_States.waiting_for_new_photo)
    else:
        await message.answer(f"–ü–æ—Ö–æ–∂–µ, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —Å —Ç–∞–∫–∏–º Id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥")

@admin_private_router.message(Change_Photo_States.waiting_for_new_photo,F.content_type == types.ContentType.PHOTO)
async def change_photo_3(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id
    user_data = await state.get_data()
    id=user_data["id"]
    event = get_event(id)[0]
    edit_event(event[0],event[1],event[2],event[3],file_id)
    await message.answer(f"‚úÖ–§–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",reply_markup=advanced_keyboard)
    await state.clear()
    
@admin_private_router.message(Change_Photo_States.waiting_for_new_photo,F.content_type == types.ContentType.TEXT)
async def change_photo_3(message: types.Message, state: FSMContext):
    if message.text=="‚ùóÔ∏è–£–±—Ä–∞—Ç—å –æ–±–ª–æ–∂–∫—É‚ùóÔ∏è":
        user_data = await state.get_data()
        id=user_data["id"]
        event = get_event(id)[0]
        edit_event(event[0],event[1],event[2],event[3],None)
        await message.answer(f"‚úÖ–û–±–ª–æ–∂–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!",reply_markup=advanced_keyboard)
        await state.clear()
    if message.text == "‚è™ –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=advanced_keyboard)
        await state.clear()
    
#–û–¢–ö–†–´–¢–¨ –°–ê–ô–¢
@admin_private_router.message(F.text == "‚òÅÔ∏è–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç")
async def open_website(message: types.Message, state:FSMContext):
    link_button = types.InlineKeyboardButton(text='üîó–°—Å—ã–ª–∫–∞', url=FLASK_SITE_ADDRESS)
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[link_button]])
    await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ', reply_markup=keyboard)

#–ò–ó–ú–ï–ù–ï–ù–ò–ï –£–ß–Å–¢–ö–ò
@admin_private_router.message(F.text == "üñãÔ∏è–ò–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
async def change_password(message: types.Message, state:FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–æ–≥–∏–Ω (–¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É)', reply_markup=types.ReplyKeyboardMarkup(keyboard=[cancel_button], resize_keyboard=True))
    await state.set_state(ChangeCredentials.waiting_for_login)

@admin_private_router.message(ChangeCredentials.waiting_for_login)
async def process_login(message: types.Message, state: FSMContext):
    if message.text == "‚è™ –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=advanced_keyboard)
        await state.clear()
    else:
        login = message.text
        await state.update_data(login=login)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–¥–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É)', reply_markup=types.ReplyKeyboardMarkup(keyboard=[cancel_button], resize_keyboard=True))
        await state.set_state(ChangeCredentials.waiting_for_password)

@admin_private_router.message(ChangeCredentials.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    if message.text == "‚è™ –û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–æ",reply_markup=advanced_keyboard)
        await state.clear()
    else:
        password = message.text
        data = await state.get_data()
        login = data.get('login')
        tg_id = message.from_user.id
        edit_admin(tg_id, login, password)
        await message.answer('–í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!',reply_markup=advanced_keyboard)
        await state.clear()