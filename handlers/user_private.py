#           –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –ö–û–ú–ê–ù–î
from aiogram import types,Router,F,flags
from aiogram.filters import Command,CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from utility.db import *
from utility.util import *
from utility.states import *
from os import getenv
from dotenv import find_dotenv, load_dotenv
from keyboardrs.admin_keyboards import fake_user_keyboard
from keyboardrs.usr_keyboards import *

user_router = Router()

@user_router.message(CommandStart())
@flags.chat_action(action="upload_photo", interval=3)
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    image = FSInputFile("static/Post.jpg")
    if not get_user(message.from_user.id):
       add_user(message.from_user.id)
    await message.answer_photo(photo=image, caption=f'''üëã–ü—Ä–∏–≤–µ—Ç, *{message.from_user.first_name}*, —è –±–æ—Ç ü§ñ *–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ C–ü–±–ì–ê–°–£*üè´\n\n–ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è *—Ü–µ–ª—å* \- –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ üë®‚Äçüéìüë©‚Äçüéì –∫ –∂–∏–∑–Ω–∏ –≤ –≤—É–∑–µ –∏ –ø–æ–º–æ—á—å –Ω–∞—á–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ–π\.\n
–° –ø–æ–º–æ—â—å—é –º–µ–Ω—è —Ç—ã –º–æ–∂–µ—à—å:
üó£ –ó–∞–¥–∞–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å—ã;
üôãüôã‚Äç‚ôÇÔ∏è –£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö  –æ–ø—Ä–æ—Å–∞—Ö;
ü§ù –£–∑–Ω–∞–≤–∞—Ç—å  –¥–∞—Ç—ã –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤—É–∑–∞;


–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, *–Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å*, —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –æ—Ç–≤–µ—á—É üí≠ –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ü§î, –µ—Å–ª–∏ –∂–µ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç–∞, –ø–∏—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ üì® –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç, —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É—Ç\.'''
,reply_markup=main_keyboard, parse_mode=ParseMode.MARKDOWN_V2)

# –ö–ê–õ–ï–ù–î–ê–†–¨ –ú–ï–†–û–ü–†–ò–Ø–¢–ò–ô
@user_router.message(F.text=='–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–πüóìÔ∏è')
async def buy_list(message: types.Message):
    image = FSInputFile("static/Events.jpg")
    events = get_event()
    res = ""
    buttons=[]
    for event in events:
        buttons.append(types.InlineKeyboardButton(text=f'üóìÔ∏è  {event[1]} - {event[2]}',callback_data=f'event_{event[0]}'))
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=chunk_list(buttons,1))
    await message.answer_photo(photo=image, caption='<b>üì¢–ö–∞–ª–µ–Ω–¥–∞—Ä—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b> —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö <b>—Å–æ–±—ã—Ç–∏–π/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b> –≤—É–∑–∞ üè´.\n–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–±–∏—Ä–∞–π –Ω–∏–∂–µüëá',reply_markup=keyboard, parse_mode=ParseMode.HTML)


@user_router.callback_query(F.data.startswith("event_"))
async def show_event_description(call: types.CallbackQuery):
    data = call.data.split('_')
    if(data[1]!='back'):
        event = get_event(event_id=data[1])[0]
        name, date, description = event[1], event[2], event[3]
        msg_text = f"<b>{name}</b> - <b>{date}</b>\n\n{description}"
        buttons=[]
        buttons.append(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='event_back'))
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=chunk_list(buttons,1))
        await bot.send_photo(call.message.chat.id, photo=event[4],
                             caption=msg_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else:
        await bot.delete_message(call.message.chat.id, call.message.message_id)
        
# ID    
@user_router.message(Command('id'))
async def print_usr_id(message: types.Message):

    await message.answer(f"{message.from_user.id}")

# –ù–ê–ü–ò–°–ê–¢–¨ –û–ë–†–ê–©–ï–ù–ò–ï –í –°–¢–£–î–°–û–í–ï–¢
@user_router.message(F.text == "–ù–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å—Ç—É–¥—Å–æ–≤–µ—Ç‚úç")
async def message_to_admins(message: types.Message,state: FSMContext):
    cancel_button = [
        [types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
    ]
    cancel_keyboard = types.ReplyKeyboardMarkup(keyboard=cancel_button, resize_keyboard=True)
    image = FSInputFile("static/Respond.jpg")
    await message.answer_photo(photo=image, caption="üìù–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ *–æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ*, –≤–∞–º –ø–æ—Å—Ç–∞—Ä–∞—é—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ üë©‚Äçüíªüßë‚Äçüíª\.",parse_mode=ParseMode.MARKDOWN_V2, reply_markup=cancel_keyboard)
    await state.set_state(Ask_Admin_States.waiting_for_question)

@user_router.message(Ask_Admin_States.waiting_for_question)
async def forward_message_to_admins(message: types.Message, state: FSMContext):
    if(message.text == "–û—Ç–º–µ–Ω–∞"):
        await message.answer("‚ùå–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è *–æ—Ç–º–µ–Ω–µ–Ω–∞*\.",parse_mode=ParseMode.MARKDOWN_V2, reply_markup=(main_keyboard, fake_user_keyboard)[isAdmin(message.from_user.id)])
        await state.clear()
    else: 
        load_dotenv(find_dotenv())
        a = message.from_user.id
        button_url = f'tg://user?id={a}'
        markup = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–°—Å—ã–ª–∫–∞", url=button_url)]])
        forwarded_message =  await message.forward(getenv('ADMIN_GROUP_ID'))
        if forwarded_message.forward_from == None:
            await bot.send_message(chat_id=getenv("ADMIN_GROUP_ID"),text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Å–∫—Ä—ã–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ, —Å id {message.from_user.id}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <a href='tg://user?id={a}'>—Å—Å—ã–ª–∫–∞</a>", parse_mode=ParseMode.HTML)
        await message.answer("‚úÖ*–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ* –≤ –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–æ–∫\.",parse_mode=ParseMode.MARKDOWN_V2, reply_markup=(main_keyboard, fake_user_keyboard)[isAdmin(message.from_user.id)])
        await state.clear()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –≤–æ–ø—Ä–æ—Å–æ–≤ FAQ
@user_router.message(F.text=='FAQüìã')
async def show_faq_groups(message: types.Message, state: FSMContext):
    await state.clear()
    groups = get_faq_groups()
    buttons = [] 
    for group in groups:
        buttons.append(types.InlineKeyboardButton(text=group, callback_data=f'faq_{group}'))
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=chunk_list(buttons,2))
    image = FSInputFile("static/FAQ.jpg")
    await message.answer_photo(photo=image, caption='–í —Ä–∞–∑–¥–µ–ª–µ *FAQ*, —Å–æ–±—Ä–∞–Ω—ã —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤,–≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª\n\nüëá–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –≤–æ–ø—Ä–æ—Å–æ–≤:',parse_mode=ParseMode.MARKDOWN_V2,reply_markup=keyboard)

@user_router.callback_query(F.data.startswith('faq_'))
async def show_faq_questions(call: types.CallbackQuery):
    data = call.data.split('_')
    if len(data)==2:
        if data[1] == 'back':
            await bot.delete_message(call.message.chat.id, call.message.message_id)
        else:
            group_name = data[1]
            questions = get_faq(question_group=group_name)
            buttons = []
            answer = ""
            c=1
            for question in questions:
                answer += "<b>" + str(c) + '.</b> ' + question[2] + '\n\n'
                buttons.append(types.InlineKeyboardButton(text=str(c), callback_data=f'faq_{group_name}_{question[0]}'))
                c+=1
            buttons.append(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='faq_back'))
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=chunk_list(buttons,2))
            if call.message.text:
                await call.message.edit_text(f'üëá<b>–í–æ–ø—Ä–æ—Å—ã –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "{group_name}</b>": \n\n'+answer, parse_mode=ParseMode.HTML, reply_markup=keyboard)
            else:
                await call.message.answer(f'üëá<b>–í–æ–ø—Ä–æ—Å—ã –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ "{group_name}</b>": \n\n'+answer, parse_mode=ParseMode.HTML, reply_markup=keyboard)
    elif len(data)==3:
        q = data[2]
        question = get_faq(id=q)
        if call.message.text:
            await call.message.edit_text(f'üëâ–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: "{question[0][2]}"\n\n{question[0][3]}')
        else:
            await call.message.answer(f'üëâ–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: "{question[0][2]}"\n\n{question[0][3]}')
        buttons = [
            types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'faq_{data[1]}')
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=chunk_list(buttons,2))
        if call.message.text:
            await call.message.edit_reply_markup(reply_markup=keyboard)
        else:
            await call.message.answer(reply_markup=keyboard)

@user_router.message(F.text=='–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ãüìû')
async def contact_list(message: types.Message,state: FSMContext):
    await state.clear()
    image = FSInputFile("static/Nets.jpg")
    buttons = []
    buttons.append(types.InlineKeyboardButton(text = 'üÖ±–ö–æ–Ω—Ç–∞–∫—Ç–µ', url="https://vk.com/ssspbgasu"))
    buttons.append(types.InlineKeyboardButton(text = '‚úâÔ∏èTelegram', url="https://t.me/studsovetgasu"))
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons])
    await message.answer_photo(photo=image, reply_markup = keyboard)

# –û–¢–í–ï–¢ –ù–ê –û–ü–†–û–°–ù–ò–ö
@user_router.callback_query(F.data.startswith("quiz_"))
async def send_response(call: types.CallbackQuery):
    data = call.data.split("_")
    add_quiz_response(call.from_user.id,data[1],data[2])
    await call.message.edit_reply_markup()
    await call.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç!üòä")